// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.80.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class RustAppImpl implements RustApp {
  final RustAppPlatform _platform;
  factory RustAppImpl(ExternalLibrary dylib) =>
      RustAppImpl.raw(RustAppPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustAppImpl.wasm(FutureOr<WasmModule> module) =>
      RustAppImpl(module as ExternalLibrary);
  RustAppImpl.raw(this._platform);
  Future<void> loadRom(
      {required Uint8List romData, Uint8List? ramData, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(romData);
    var arg1 = _platform.api2wire_opt_uint_8_list(ramData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_load_rom(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_error,
      constMeta: kLoadRomConstMeta,
      argValues: [romData, ramData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadRomConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load_rom",
        argNames: ["romData", "ramData"],
      );

  Future<Uint8List?> unloadEmulator({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_unload_emulator(port_),
      parseSuccessData: _wire2api_opt_uint_8_list,
      parseErrorData: _wire2api_error,
      constMeta: kUnloadEmulatorConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnloadEmulatorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unload_emulator",
        argNames: [],
      );

  Future<Uint32List?> renderFrame({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_render_frame(port_),
      parseSuccessData: _wire2api_opt_uint_32_list,
      parseErrorData: _wire2api_error,
      constMeta: kRenderFrameConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRenderFrameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "render_frame",
        argNames: [],
      );

  Future<void> handleVblank({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_handle_vblank(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_error,
      constMeta: kHandleVblankConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHandleVblankConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "handle_vblank",
        argNames: [],
      );

  Future<void> setButtonsState(
      {required Uint8List buttonStates, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(buttonStates);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_buttons_state(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_error,
      constMeta: kSetButtonsStateConstMeta,
      argValues: [buttonStates],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetButtonsStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_buttons_state",
        argNames: ["buttonStates"],
      );

  Future<void> load(
      {required Uint8List romData, Uint8List? ramData, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(romData);
    var arg1 = _platform.api2wire_opt_uint_8_list(ramData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_load(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_error,
      constMeta: kLoadConstMeta,
      argValues: [romData, ramData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLoadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "load",
        argNames: ["romData", "ramData"],
      );

  Future<Uint8List?> unload({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_unload(port_),
      parseSuccessData: _wire2api_opt_uint_8_list,
      parseErrorData: _wire2api_error,
      constMeta: kUnloadConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnloadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "unload",
        argNames: [],
      );

  Future<Uint32List?> render({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_render(port_),
      parseSuccessData: _wire2api_opt_uint_32_list,
      parseErrorData: _wire2api_error,
      constMeta: kRenderConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRenderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "render",
        argNames: [],
      );

  Future<void> vblank({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_vblank(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_error,
      constMeta: kVblankConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVblankConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vblank",
        argNames: [],
      );

  Future<void> setButtons({required Uint8List buttonStates, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(buttonStates);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_buttons(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_error,
      constMeta: kSetButtonsConstMeta,
      argValues: [buttonStates],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetButtonsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_buttons",
        argNames: ["buttonStates"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  Uint32List? _wire2api_opt_uint_32_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_32_list(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Object _wire2api_error(dynamic raw) {
    return raw;
  }

  Uint32List _wire2api_uint_32_list(dynamic raw) {
    return raw as Uint32List;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustAppPlatform extends FlutterRustBridgeBase<RustAppWire> {
  RustAppPlatform(ffi.DynamicLibrary dylib) : super(RustAppWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_8_list(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustAppWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustAppWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustAppWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_load_rom(
    int port_,
    ffi.Pointer<wire_uint_8_list> rom_data,
    ffi.Pointer<wire_uint_8_list> ram_data,
  ) {
    return _wire_load_rom(
      port_,
      rom_data,
      ram_data,
    );
  }

  late final _wire_load_romPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_load_rom');
  late final _wire_load_rom = _wire_load_romPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_unload_emulator(
    int port_,
  ) {
    return _wire_unload_emulator(
      port_,
    );
  }

  late final _wire_unload_emulatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_unload_emulator');
  late final _wire_unload_emulator =
      _wire_unload_emulatorPtr.asFunction<void Function(int)>();

  void wire_render_frame(
    int port_,
  ) {
    return _wire_render_frame(
      port_,
    );
  }

  late final _wire_render_framePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_render_frame');
  late final _wire_render_frame =
      _wire_render_framePtr.asFunction<void Function(int)>();

  void wire_handle_vblank(
    int port_,
  ) {
    return _wire_handle_vblank(
      port_,
    );
  }

  late final _wire_handle_vblankPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_handle_vblank');
  late final _wire_handle_vblank =
      _wire_handle_vblankPtr.asFunction<void Function(int)>();

  void wire_set_buttons_state(
    int port_,
    ffi.Pointer<wire_uint_8_list> button_states,
  ) {
    return _wire_set_buttons_state(
      port_,
      button_states,
    );
  }

  late final _wire_set_buttons_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_buttons_state');
  late final _wire_set_buttons_state = _wire_set_buttons_statePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_load(
    int port_,
    ffi.Pointer<wire_uint_8_list> rom_data,
    ffi.Pointer<wire_uint_8_list> ram_data,
  ) {
    return _wire_load(
      port_,
      rom_data,
      ram_data,
    );
  }

  late final _wire_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_load');
  late final _wire_load = _wire_loadPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_unload(
    int port_,
  ) {
    return _wire_unload(
      port_,
    );
  }

  late final _wire_unloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_unload');
  late final _wire_unload = _wire_unloadPtr.asFunction<void Function(int)>();

  void wire_render(
    int port_,
  ) {
    return _wire_render(
      port_,
    );
  }

  late final _wire_renderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_render');
  late final _wire_render = _wire_renderPtr.asFunction<void Function(int)>();

  void wire_vblank(
    int port_,
  ) {
    return _wire_vblank(
      port_,
    );
  }

  late final _wire_vblankPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_vblank');
  late final _wire_vblank = _wire_vblankPtr.asFunction<void Function(int)>();

  void wire_set_buttons(
    int port_,
    ffi.Pointer<wire_uint_8_list> button_states,
  ) {
    return _wire_set_buttons(
      port_,
      button_states,
    );
  }

  late final _wire_set_buttonsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_buttons');
  late final _wire_set_buttons = _wire_set_buttonsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
